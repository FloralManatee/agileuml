class MathLib
{
  private static int ix; // internal
  private static int iy; // internal
  private static int iz; // internal
  private static List hexdigit; 

  static 
  {  MathLib.sethexdigit((new SystemTypes.Set()).add("0").add("1").add("2").add("3").add("4").add("5").add("6").add("7").add("8").add("9").add("A").add("B").add("C").add("D").add("E").add("F").getElements());
      MathLib.setSeeds(1001,781,913);
  }

  public MathLib()
  {
    this.ix = 0;
    this.iy = 0;
    this.iz = 0;
    this.hexdigit = new Vector();
  }


  public String toString()
  { String _res_ = "(MathLib) ";
    _res_ = _res_ + ix + ",";
    _res_ = _res_ + iy + ",";
    _res_ = _res_ + iz + ",";
    return _res_;
  }

  public static void setix(int ix_x) { ix = ix_x; }

  public static void setiy(int iy_x) { iy = iy_x; }

  public static void setiz(int iz_x) { iz = iz_x; }

  public static void sethexdigit(List hexdigit_x) { hexdigit = hexdigit_x; }

  public static void sethexdigit(int _ind, String hexdigit_x) { hexdigit.set(_ind, hexdigit_x); }

    public static void addhexdigit(String hexdigit_x)
  { hexdigit.add(hexdigit_x); }

  public static void removehexdigit(String hexdigit_x)
  { Vector _removedhexdigit = new Vector();
    _removedhexdigit.add(hexdigit_x);
    hexdigit.removeAll(_removedhexdigit);
  }

    public static int getix() { return ix; }

    public static int getiy() { return iy; }

    public static int getiz() { return iz; }

    public static List gethexdigit() { return hexdigit; }



    public static double pi()
  { return Math.PI; }


    public static double e()
  { return Math.E; }


    public static void setSeeds(int x,int y,int z)
  { MathLib.setix(x);
    MathLib.setiy(y);
    MathLib.setiz(z);
  }

    public static double nrandom()
  {  double result;
MathLib.setix(( MathLib.getix() * 171 ) % 30269);
  MathLib.setiy(( MathLib.getiy() * 172 ) % 30307);
  MathLib.setiz(( MathLib.getiz() * 170 ) % 30323);
      return ( MathLib.getix() / 30269.0 + MathLib.getiy() / 30307.0 + MathLib.getiz() / 30323.0 );

  }


    public static double random()
  {   double result = 0; 
  final double r = MathLib.nrandom(); 
     result = ( r - ((int) Math.floor(r)) );
       return result;
  }


    public static long combinatorial(int n,int m)
  {   long result = 0;
    if (n < m || m < 0) { return result; } 
   
  if (n - m < m) 
  {   result = Ocl.prdint(Ocl.integerSubrange(m + 1,n)) / Set.prdint(Ocl.integerSubrange(1,n - m));
 
  }  else
      if (n - m >= m) 
  {   result = Ocl.prdint(Ocl.integerSubrange(n - m + 1,n)) / Ocl.prdint(Ocl.integerSubrange(1,m));
 
  }       return result;
  }


    public static long factorial(int x)
  {   long result = 0;
 
  if (x < 2) 
  {   result = 1;
 
  }  else
      if (x >= 2) 
  {   result = Ocl.prdint(Ocl.integerSubrange(2,x));
 
  }       return result;
  }


    public static double asinh(double x)
  {   double result = 0;
 
  result = Math.log(( x + Math.sqrt(( x * x + 1 )) ));
    return result;
  }


    public static double acosh(double x)
  {   double result = 0;
    if (x < 1) { return result; } 
   
  result = Math.log(( x + Math.sqrt(( x * x - 1 )) ));
    return result;
  }


    public static double atanh(double x)
  {   double result = 0;
    if (x == 1) { return result; } 
   
  result = 0.5 * Math.log(( ( 1 + x ) / ( 1 - x ) ));
    return result;
  }


    public static String decimal2bits(long x)
  {   String result = "";
 
      if (x == 0) { result = ""; }
    else { result = MathLib.decimal2bits(x / 2) + "" + ( x % 2 ); }
      return result;
  }


    public static String decimal2binary(long x)
  {   String result = "";
 
      if (x < 0) { result = "-" + MathLib.decimal2bits(-x); }
    else {     if (x == 0) { result = "0"; }
    else { result = MathLib.decimal2bits(x); } }
      return result;
  }


    public static String decimal2oct(long x)
  {   String result = "";
 
      if (x == 0) { result = ""; }
    else { result = MathLib.decimal2oct(x / 8) + "" + ( x % 8 ); }
      return result;
  }


    public static String decimal2octal(long x)
  {   String result = "";
 
      if (x < 0) { result = "-" + MathLib.decimal2oct(-x); }
    else {     if (x == 0) { result = "0"; }
    else { result = MathLib.decimal2oct(x); } }
      return result;
  }


    public static String decimal2hx(long x)
  {   String result = "";
 
      if (x == 0) { result = ""; }
    else { result = MathLib.decimal2hx(x / 16) + ( "" + ((String) MathLib.gethexdigit().get(((int) ( x % 16 )) + 1 - 1)) ); }
      return result;
  }


    public static String decimal2hex(long x)
  {   String result = "";
 
      if (x < 0) { result = "-" + MathLib.decimal2hx(-x); }
    else {     if (x == 0) { result = "0"; }
    else { result = MathLib.decimal2hx(x); } }
      return result;
  }


    public static int bitwiseAnd(int x,int y)
  {  int result;
  int x1;
  x1 = x;
    int y1;
  y1 = y;
    int k;
  k = 1;
    int res;
  res = 0;
    while (( x1 > 0 && y1 > 0 )) 
  {     if (x1 % 2 == 1 && y1 % 2 == 1)
    { res = res + k; }

  k = k * 2;
  x1 = x1 / 2;
  y1 = y1 / 2;


 }
      return res;
  }


    public static int bitwiseOr(int x,int y)
  {  int result;
  int x1;
  x1 = x;
    int y1;
  y1 = y;
    int k;
  k = 1;
    int res;
  res = 0;
    while (( x1 > 0 || y1 > 0 )) 
  {     if (x1 % 2 == 1 || y1 % 2 == 1)
    { res = res + k; }
    else {     {} /* No update form for: skip */ }

  k = k * 2;
  x1 = x1 / 2;
  y1 = y1 / 2;


 }
      return res;
  }


    public static int bitwiseXor(int x,int y)
  {  int result;
  int x1;
  x1 = x;
    int y1;
  y1 = y;
    int k;
  k = 1;
    int res;
  res = 0;
    while (( x1 > 0 || y1 > 0 )) 
  {     if (( x1 % 2 ) != ( y1 % 2 ))
    { res = res + k; }
    else {     {} /* No update form for: skip */ }

  k = k * 2;
  x1 = x1 / 2;
  y1 = y1 / 2;


 }
      return res;

  }


    public static List toBitSequence(long x)
  {  List result;
  long x1;
  x1 = x;
    List res;
  res = new Vector();
    while (x1 > 0) 
  {     if (x1 % 2 == 0)
    { res = Ocl.concatenate((new Vector()).add(new Boolean(false)).getElements(),res); }
    else { res = Ocl.concatenate((new Vector()).add(new Boolean(true)).getElements(),res); }

  x1 = x1 / 2;
 }
      return res;





  }

}

/*  public static String decimal2bits(long x)
  { if (x == 0) 
    { return ""; }
    return decimal2bits(x/2) + "" + (x % 2); 
  }
  
  public static String decimal2binary(long x)
  { if (x < 0) 
    { return "-" + decimal2bits(-x); }
    else if (x == 0)
    { return "0"; }
    else 
    { return decimal2bits(x); }
  }

  public static String decimal2oct(long x)
  { if (x == 0) 
    { return ""; }
    return decimal2oct(x/8) + "" + (x % 8); 
  }
  
  public static String decimal2octal(long x)
  { if (x < 0) 
    { return "-" + decimal2oct(-x); }
    else if (x == 0)
    { return "0"; }
    else 
    { return decimal2oct(x); }
  }
*/ 